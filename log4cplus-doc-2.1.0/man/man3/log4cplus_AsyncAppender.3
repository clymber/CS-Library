.TH "log4cplus::AsyncAppender" 3 "Fri Sep 20 2024" "Version 2.1.0" "log4cplus" \" -*- nroff -*-
.ad l
.nh
.SH NAME
log4cplus::AsyncAppender \- This \fC\fBAppender\fP\fP is a wrapper to which other appenders can be attached\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <asyncappender\&.h>\fP
.PP
Inherits \fBlog4cplus::Appender\fP, and \fBlog4cplus::helpers::AppenderAttachableImpl\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAsyncAppender\fP (\fBSharedAppenderPtr\fP const &app, unsigned max_len)"
.br
.ti -1c
.RI "\fBAsyncAppender\fP (\fBhelpers::Properties\fP const &)"
.br
.ti -1c
.RI "virtual \fB~AsyncAppender\fP ()"
.br
.ti -1c
.RI "virtual void \fBclose\fP ()"
.br
.RI "Release any resources allocated within the appender such as file handles, network connections, etc\&. "
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBappend\fP (\fBspi::InternalLoggingEvent\fP const &)"
.br
.RI "Subclasses of \fC\fBAppender\fP\fP should implement this method to perform actual logging\&. "
.ti -1c
.RI "void \fBinit_queue_thread\fP (unsigned)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBthread::AbstractThreadPtr\fP \fBqueue_thread\fP"
.br
.ti -1c
.RI "\fBthread::QueuePtr\fP \fBqueue\fP"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
This \fC\fBAppender\fP\fP is a wrapper to which other appenders can be attached\&. 

The attached appendres are then appended to from a separate thread which reads events appended to this appender from a queue\&.
.PP
.SS "Properties"
.PP
.IP "\fB\fCQueueLimit\fP \fP" 1c
Events queue size limit\&. Default is 100\&. 
.PP
.IP "\fB\fC\fBAppender\fP\fP \fP" 1c
\fC\fBAppender\fP\fP and its properties to use as sink for logged events\&. 
.PP
.PP
.PP
\fBSee also\fP
.RS 4
\fBhelpers::AppenderAttachableImpl\fP 
.RE
.PP

.PP
Definition at line \fB77\fP of file \fBasyncappender\&.h\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "log4cplus::AsyncAppender::AsyncAppender (\fBSharedAppenderPtr\fP const & app, unsigned max_len)"

.SS "log4cplus::AsyncAppender::AsyncAppender (\fBhelpers::Properties\fP const &)"

.SS "virtual log4cplus::AsyncAppender::~AsyncAppender ()\fC [virtual]\fP"

.SH "Member Function Documentation"
.PP 
.SS "virtual void log4cplus::AsyncAppender::append (\fBspi::InternalLoggingEvent\fP const & event)\fC [protected]\fP, \fC [virtual]\fP"

.PP
Subclasses of \fC\fBAppender\fP\fP should implement this method to perform actual logging\&. 
.PP
\fBSee also\fP
.RS 4
\fBdoAppend\fP method\&. 
.RE
.PP

.PP
Implements \fBlog4cplus::Appender\fP\&.
.SS "virtual void log4cplus::AsyncAppender::close ()\fC [virtual]\fP"

.PP
Release any resources allocated within the appender such as file handles, network connections, etc\&. It is a programming error to append to a closed appender\&. 
.PP
Implements \fBlog4cplus::Appender\fP\&.
.SS "void log4cplus::AsyncAppender::init_queue_thread (unsigned)\fC [protected]\fP"

.SH "Member Data Documentation"
.PP 
.SS "\fBthread::QueuePtr\fP log4cplus::AsyncAppender::queue\fC [protected]\fP"

.PP
Definition at line \fB94\fP of file \fBasyncappender\&.h\fP\&.
.SS "\fBthread::AbstractThreadPtr\fP log4cplus::AsyncAppender::queue_thread\fC [protected]\fP"

.PP
Definition at line \fB93\fP of file \fBasyncappender\&.h\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for log4cplus from the source code\&.
